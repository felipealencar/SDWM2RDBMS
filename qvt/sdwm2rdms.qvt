
transformation sdwm2rdbms(sdw:sdwm, rdbms:SimpleRDBMS) {

	-- One Table olny can have one primeary key
	key SimpleRDBMS::RdbmsKey{rdbmsOwner};
	
	-- map each schema to a schema
	top relation SchemaToSchema {
	  checkonly domain sdw p : sdwm::Schema {
	  };
	  enforce domain rdbms s : SimpleRDBMS::RdbmsSchema {
	  	  rdbmsName = 'SDW'
	  };
	}
	
	-- map each sdwm::Table to a rdbms::table
	top relation TableToTable {
	  tn : String;
	  checkonly domain sdw tab: sdwm::Table { 
	     schema = schemaSDWM : sdwm::Schema {},
	  	 name = tn
	  };
	  enforce domain rdbms t : SimpleRDBMS::RdbmsTable {
	    rdbmsSchema = schemaRDBMS : SimpleRDBMS::RdbmsSchema {},
	    rdbmsName = tn,
	    rdbmsColumn = cl : SimpleRDBMS::RdbmsColumn {
	      rdbmsName = tn + '_tid',
	      rdbmsType = 'NUMBER'
	    },
	    rdbmsKey = k : SimpleRDBMS::RdbmsKey {
	      rdbmsColumn = cl : SimpleRDBMS::RdbmsColumn{}
	    }
	  };
	  when {
	    SchemaToSchema(schemaSDWM, schemaRDBMS);
	  }
	  where {
	    TableToPkey(tab, k);
	    //prefix = cn;
	    //AttributeToColumn(c, t, prefix);
	  }	  
	}
	
	-- 
	relation TableToPkey {
	  tn : String;
	  checkonly domain sdw tab: sdwm::Table { 
	  	 name = tn
	  };
	  enforce domain rdbms k : SimpleRDBMS::RdbmsKey {
	    rdbmsName = tn + '_pk'
	  };  
	}
	
	-- map each Relation MM to a Table
	top relation RelMMToTable{
	  tableName: String;
	  sName: String;
	  tName : String;
	  checkonly domain sdw rel: sdwm::Relationship{
	     schema = schemaSDWM : sdwm::Schema {},
	     cardinality = sdwm::Cardinality::MANY_TO_MANY,
	     source = s : sdwm::Table{ name = sName },
	     target = t : sdwm::Table{ name = tName}
	  };
	  enforce domain rdbms table: SimpleRDBMS::RdbmsTable{
	    rdbmsSchema = schemaRDBMS : SimpleRDBMS::RdbmsSchema {
	    },
	    rdbmsName = tableName,
	    rdbmsColumn = cl : SimpleRDBMS::RdbmsColumn {
	    	rdbmsName = tableName + '_tid',
	    	rdbmsType = 'NUMBER'
	    },
	    rdbmsKey = k : SimpleRDBMS::RdbmsKey {
	    	rdbmsColumn = cl : SimpleRDBMS::RdbmsColumn{}
	    }
	  };
	  when {
	    SchemaToSchema(schemaSDWM, schemaRDBMS);
	  }
	  where {
	  	tableName = sName + tName;
	    RelMMToPkey(rel, k);
	  }
	}
	relation RelMMToPkey {
	  sName: String;
	  tName : String;
	  checkonly domain sdw rel: sdwm::Relationship{
	     schema = schemaSDWM : sdwm::Schema {},
	     cardinality = sdwm::Cardinality::MANY_TO_MANY,
	     source = s : sdwm::Table{ name = sName },
	     target = t : sdwm::Table{ name = tName}
	  };
	  enforce domain rdbms k : SimpleRDBMS::RdbmsKey {
	    rdbmsName = sName + tName + '_pk'
	  };  
	}	
	-- Relações N-1 entre Dimensão e Fato so podem ser Dimensão como N e Fato como 1.
	-- map each association N to 1 between Dimension and Fact to a PK and FK, whe Dimension 
	-- is the source and Fact is the target of the Relation
	top relation Rel_N_1_DIM_FACT_One_to_Many {
	  r : String;
	  sName: String;
	  tName : String;
	  fkn : String;
	  fcn : String;
	  
	  checkonly domain sdw rel: sdwm::Relationship{
	     schema = schemaSDWM : sdwm::Schema {},
	     role = r,
	     cardinality = sdwm::Cardinality::ONE_TO_MANY,
	     source = s : sdwm::Dimension{ name = sName },
	     target = t : sdwm::Fact{ name = tName}
	  };
	  
	  enforce domain rdbms fk : SimpleRDBMS::RdbmsForeignKey {
	    rdbmsName = fkn,
	    rdbmsOwner = destTbl : SimpleRDBMS::RdbmsTable {
	      rdbmsSchema = schemaRDBMS : SimpleRDBMS::RdbmsSchema {},
	      rdbmsKey = k : SimpleRDBMS::RdbmsKey {
	      rdbmsColumn = fc : SimpleRDBMS::RdbmsColumn{} --add fc in the PK set
	    }
	    },
	    rdbmsColumn = fc : SimpleRDBMS::RdbmsColumn {
	      rdbmsName = fcn,
	      rdbmsType = 'NUMBER',
	      rdbmsOwner = destTbl
	    },
	    rdbmsRefersTo = pKey : SimpleRDBMS::RdbmsKey {
	      rdbmsOwner = srcTbl : SimpleRDBMS::RdbmsTable {}
	    }
	  };
	  
	  when {
	    TableToPkey(s, pKey);
	    SchemaToSchema(schemaSDWM, schemaRDBMS);
	    TableToTable(s, srcTbl); 
	    TableToTable(t, destTbl);
	  }
	  
	  where {
	    fkn = if  r.oclIsUndefined() 
				then sName + '_' + tName 
				else sName + '_' + r + '_' + tName 
			endif; 
		fcn = fkn + '_tid';
	  }
	}

	-- Relações N-1 entre Dimensão e Fato so podem ser Dimensão como N e Fato como 1.
	-- map each association N to 1 between Dimension and Fact to a PK and FK, whe Dimension 
	-- is the target and Fact is the source of the Relation
	top relation Rel_N_1_FACT_DIM_One_to_Many {
	  r : String;
	  sName: String;
	  tName : String;
	  fkn : String;
	  fcn : String;
	  
	  checkonly domain sdw rel: sdwm::Relationship{
	     schema = schemaSDWM : sdwm::Schema {},
	     role = r,
	     cardinality = sdwm::Cardinality::MANY_TO_ONE,
	     source = s : sdwm::Fact{ name = sName },
	     target = t : sdwm::Dimension{ name = tName}
	  };
	  
	  enforce domain rdbms fk : SimpleRDBMS::RdbmsForeignKey {
	    rdbmsName = fkn,
	    rdbmsOwner = destTbl : SimpleRDBMS::RdbmsTable {
	      rdbmsSchema = schemaRDBMS : SimpleRDBMS::RdbmsSchema {},
	      rdbmsKey = k : SimpleRDBMS::RdbmsKey {
	      rdbmsColumn = fc : SimpleRDBMS::RdbmsColumn{} --add fc in the PK set
	    }
	    },
	    rdbmsColumn = fc : SimpleRDBMS::RdbmsColumn {
	      rdbmsName = fcn,
	      rdbmsType = 'NUMBER',
	      rdbmsOwner = destTbl
	    },
	    rdbmsRefersTo = pKey : SimpleRDBMS::RdbmsKey {
	      rdbmsOwner = srcTbl : SimpleRDBMS::RdbmsTable {}
	    }
	  };
	  
	  when {
	    TableToPkey(t, pKey);
	    SchemaToSchema(schemaSDWM, schemaRDBMS);
	    TableToTable(t, srcTbl); 
	    TableToTable(s, destTbl);
	  }
	  
	  where {
	    fkn = if  r.oclIsUndefined() 
				then sName + '_' + tName 
				else sName + '_' + r + '_' + tName 
			endif; 
		fcn = fkn + '_tid';
	  }
	}
	
	-- Relações 1-N entre Dimensão e Bridge so podem ser Dimensão como 1 e Fato como N.
	-- map each association N to 1 between Dimension and Fact to a PK and FK, whe Dimension 
	-- is the source and Fact is the target of the Relation
	top relation Rel_1_N_DIM_BRIDGE_One_to_Many {
	  r : String;
	  sName: String;
	  tName : String;
	  fkn : String;
	  fcn : String;
	  
	  checkonly domain sdw rel: sdwm::Relationship{
	     schema = schemaSDWM : sdwm::Schema {},
	     role = r,
	     cardinality = sdwm::Cardinality::ONE_TO_MANY,
	     source = s : sdwm::Dimension{ name = sName },
	     target = t : sdwm::Bridge{ name = tName}
	  };
	  
	  enforce domain rdbms fk : SimpleRDBMS::RdbmsForeignKey {
	    rdbmsName = fkn,
	    rdbmsOwner = destTbl : SimpleRDBMS::RdbmsTable {
	      rdbmsSchema = schemaRDBMS : SimpleRDBMS::RdbmsSchema {},
	      rdbmsKey = k : SimpleRDBMS::RdbmsKey {
	      rdbmsColumn = fc : SimpleRDBMS::RdbmsColumn{} --add fc in the PK set
	    }
	    },
	    rdbmsColumn = fc : SimpleRDBMS::RdbmsColumn {
	      rdbmsName = fcn,
	      rdbmsType = 'NUMBER',
	      rdbmsOwner = destTbl
	    },
	    rdbmsRefersTo = pKey : SimpleRDBMS::RdbmsKey {
	      rdbmsOwner = srcTbl : SimpleRDBMS::RdbmsTable {}
	    }
	  };
	  
	  when {
	    TableToPkey(s, pKey);
	    SchemaToSchema(schemaSDWM, schemaRDBMS);
	    TableToTable(s, srcTbl); 
	    TableToTable(t, destTbl);
	  }
	  
	  where {
	  	fkn = if  r.oclIsUndefined() 
				then sName + '_' + tName 
				else sName + '_' + r + '_' + tName 
			endif; 
		fcn = fkn + '_tid';
	  }
	}
	
-- Relações 1-N entre Dimensão e Bridge so podem ser Dimensão como 1 e Fato como N.
	-- map each association N to 1 between Dimension and Fact to a PK and FK, whe Dimension 
	-- is the source and Fact is the target of the Relation
	top relation Rel_N_1_BRIDGE_DIM_Many_To_One {
	  r : String;
	  sName: String;
	  tName : String;
	  fkn : String;
	  fcn : String;
	  
	  checkonly domain sdw rel: sdwm::Relationship{
	     schema = schemaSDWM : sdwm::Schema {},
	     role = r,
	     cardinality = sdwm::Cardinality::MANY_TO_ONE,
	     source = s : sdwm::Bridge{ name = sName },
	     target = t : sdwm::Dimension{ name = tName}
	  };
	  
	  enforce domain rdbms fk : SimpleRDBMS::RdbmsForeignKey {
	    rdbmsName = fkn,
	    rdbmsOwner = destTbl : SimpleRDBMS::RdbmsTable {
	      rdbmsSchema = schemaRDBMS : SimpleRDBMS::RdbmsSchema {},
	      rdbmsKey = k : SimpleRDBMS::RdbmsKey {
	      rdbmsColumn = fc : SimpleRDBMS::RdbmsColumn{} --add fc in the PK set
	    }
	    },
	    rdbmsColumn = fc : SimpleRDBMS::RdbmsColumn {
	      rdbmsName = fcn,
	      rdbmsType = 'NUMBER',
	      rdbmsOwner = destTbl
	    },
	    rdbmsRefersTo = pKey : SimpleRDBMS::RdbmsKey {
	      rdbmsOwner = srcTbl : SimpleRDBMS::RdbmsTable {}
	    }
	  };
	  
	  when {
	    TableToPkey(t, pKey);
	    SchemaToSchema(schemaSDWM, schemaRDBMS);
	    TableToTable(t, srcTbl); 
	    TableToTable(s, destTbl);
	  }
	  
	  where {
	  	fkn = if  r.oclIsUndefined() 
				then sName + '_' + tName 
				else sName + '_' + r + '_' + tName 
			endif; 
		fcn = fkn + '_tid';
	  }
	}
	
	
		
}